// Clearfix
@mixin clearfix() {
	&:after {
		content: '';
		display: table;
		table-layout: fixed;
		clear: both;
	}
}

// Load an SVG icon from the map
//
// Set up to be used with this setup: https://gist.github.com/jonathantneal/82ab2e96cfaa269a34f6
//
// @param {string} $icon-name - Title of the SVG icon
@mixin svg-icon($icon-name, $fill) {
	background-image: url('../svg/symbol-defs.svg#' + $icon-name );
	fill: $fill;
	background-repeat: no-repeat;
}

/// Use rem values with fallback
///
/// @param {string} $property - Property that needs a rem value
/// @param {measure} $values - Values
///
/// @group helpers
///
/// @link https://gist.github.com/webgefrickel/4530526
@mixin rem($property, $values) {
	// Create a couple of empty lists as output buffers.
	$font-size: 16px;
	$px-values: ();
	$rem-values: ();
	// Loop through the $values list
	@each $value in $values {
		// For each property value, if it's in rem or px, derive both rem and
		// px values for it and add those to the end of the appropriate buffer.
		// Ensure all pixel values are rounded to the nearest pixel.
		@if $value == 0 or $value == 0px {
			// 0 -- use it without a unit
			$px-values: join($px-values, 0);
			$rem-values: join($rem-values, 0);
		}
		@else if type-of($value) == number and not unitless($value) and unit($value) == px {
			// px value given - calculate rem value from font-size
			$new-rem-value: $value / $font-size;
			$px-values: join($px-values, round($value));
			$rem-values: join($rem-values, #{$new-rem-value}rem);
		}
		@else if type-of($value) == number and not unitless($value) and unit($value) == "%" {
			// % value given - don't add px or rem
			$px-values: join($px-values, #{$value});
			$rem-values: join($rem-values, #{$value});
		}
		@else if $value == auto {
			// auto - don't add px or rem
			$px-values: join($px-values, auto);
			$rem-values: join($rem-values, auto);
		}
		@else {
			// unitless value - use those directly as rem and calculate the px-fallback
			$px-values: join($px-values, round($value * $font-size));
			$rem-values: join($rem-values, #{$value}rem);
		}
	}
	// output the converted rules
	#{$property}: $px-values;
	#{$property}: $rem-values;
}

/// @alias font-fallback
/// Adds font-family for a fallback font stack and the actual font stack with a class.
/// To be used with FontFaceOnload, or the CSS Font Loading Module.
///
/// @param {String} $fallback-stack - Desired fallback stack
/// @require {String} $fallback-stack
///
/// @param {String} $web-font-stack - Desired fallback stack
/// @require {String} $web-font-stack
///
/// @param {String} $class-name - Class name applied to the body when the web font is available
/// @require {String} $class-name
///
/// @example scss - Basic Usage
/// .basic-usage {
///	 font-fallback(
///		 '"HelveticaNeue", "Helvetica", "Arial", sans-serif',
///		 '"Balto Web", "HelveticaNeue", "Helvetica", "Arial", sans-serif',
///		 'font-loaded'
///	 );
/// }
/// @example css
/// .basic-usage {
///	 font-family: "HelveticaNeue", "Helvetica", "Arial", sans-serif;
/// }
///
/// .font-loaded .basic-usage {
///	 font-family: "Balto Web", "HelveticaNeue", "Helvetica", "Arial", sans-serif;
/// }
/// @author Zack Rothauser
/// @access public
@mixin font-fallback($fallback-stack, $web-font-stack, $class-name) {
	@if $use_font_loader == true {
		font-family: $fallback-stack;

		.#{$class-name} &{
			font-family: $web-font-stack;
		}
	} @else {
		font-family: $web-font-stack;
	}
}

// Wrappers for font-fallback() for all of the fonts used in the theme
@mixin font-body {
	@include font-fallback($font__main--fallback, $font__main, 'fonts-loaded');
}

@mixin font-title {
	@include font-fallback($font__title--fallback, $font__title, 'fonts-loaded');
}

